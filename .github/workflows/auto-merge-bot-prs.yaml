name: Auto-merge Bot PRs

on:
  pull_request:
    types: [opened, labeled, ready_for_review]

jobs:
  auto-merge:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      checks: read
    
    steps:
      - name: Security Check - No Token Exposure
        run: |
          echo "üîí Security: This workflow uses only GITHUB_TOKEN (no custom PAT)"
          echo "üîí All token values are automatically masked by GitHub"
          
      - name: Check if auto-merge should be enabled
        id: check
        uses: actions/github-script@v7
        with:
          script: |
            const prAuthor = context.payload.pull_request.user.login;
            const prLabels = context.payload.pull_request.labels.map(label => label.name);
            const isDraft = context.payload.pull_request.draft;
            const prNumber = context.payload.pull_request.number;
            
            console.log(`üë§ PR Author: ${prAuthor}`);
            console.log(`üè∑Ô∏è PR Labels: ${prLabels.join(', ')}`);
            console.log(`üìù Is Draft: ${isDraft}`);
            
            // Only auto-merge if:
            // 1. Author is github-actions[bot]
            // 2. Has 'auto-merge' label
            // 3. Not a draft
            // 4. Has 'version-bump' label (extra safety)
            
            const isGitHubActionsBot = prAuthor === 'github-actions[bot]';
            const hasAutoMergeLabel = prLabels.includes('auto-merge');
            const hasVersionBumpLabel = prLabels.includes('version-bump');
            
            if (!isGitHubActionsBot) {
              console.log('‚ùå Not created by GitHub Actions bot - skipping auto-merge');
              core.setOutput('should_auto_merge', 'false');
              return;
            }
            
            if (!hasAutoMergeLabel) {
              console.log('‚ùå No auto-merge label - skipping');
              core.setOutput('should_auto_merge', 'false');
              return;
            }
            
            if (isDraft) {
              console.log('‚ùå PR is draft - skipping auto-merge');
              core.setOutput('should_auto_merge', 'false');
              return;
            }
            
            if (!hasVersionBumpLabel) {
              console.log('‚ö†Ô∏è No version-bump label - this might not be a version bump PR');
              console.log('üîí Requiring version-bump label for safety');
              core.setOutput('should_auto_merge', 'false');
              return;
            }
            
            console.log('‚úÖ All conditions met for auto-merge');
            core.setOutput('should_auto_merge', 'true');

      - name: Wait for status checks
        if: steps.check.outputs.should_auto_merge == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const maxWaitTime = 10 * 60 * 1000; // 10 minutes
            const checkInterval = 30 * 1000; // 30 seconds
            const startTime = Date.now();
            
            console.log('‚è≥ Waiting for status checks to complete...');
            
            while (Date.now() - startTime < maxWaitTime) {
              const { data: pr } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber
              });
              
              // Check if PR is mergeable
              if (pr.mergeable_state === 'clean') {
                console.log('‚úÖ All status checks passed - ready to merge');
                return;
              } else if (pr.mergeable_state === 'blocked') {
                console.log('‚ùå Status checks failed - cannot auto-merge');
                throw new Error('Status checks failed');
              } else if (['dirty', 'unstable'].includes(pr.mergeable_state)) {
                console.log('‚ùå PR has conflicts or issues - cannot auto-merge');
                throw new Error('PR has conflicts or is unstable');
              }
              
              console.log(`‚è≥ Status checks still running (${pr.mergeable_state}) - waiting...`);
              await new Promise(resolve => setTimeout(resolve, checkInterval));
            }
            
            throw new Error('Timeout waiting for status checks');

      - name: Enable auto-merge
        if: steps.check.outputs.should_auto_merge == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            
            try {
              // Enable auto-merge with squash merge
              await github.rest.pulls.createReview({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
                event: 'APPROVE',
                body: 'ü§ñ **Auto-approved by GitHub Actions**\n\nThis version bump PR was automatically created and approved for merging.\n\n‚úÖ All checks passed\n‚úÖ Created by trusted automation\n‚úÖ Safe to merge'
              });
              
              console.log('‚úÖ Auto-approved the PR');
              
              // Try to merge immediately if checks are passing
              const { data: pr } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber
              });
              
              if (pr.mergeable_state === 'clean') {
                await github.rest.pulls.merge({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: prNumber,
                  commit_title: `${pr.title} (#${prNumber})`,
                  commit_message: `${pr.body}

ü§ñ Auto-merged by GitHub Actions`,
                  merge_method: 'squash'
                });
                
                console.log('‚úÖ Successfully auto-merged the PR');
                
                // Comment on success
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  body: 'üéâ **Auto-merge successful!**\n\nThis version bump PR has been automatically merged.\n\nüöÄ **Next step**: Run the [Smart Release workflow](https://github.com/' + context.repo.owner + '/' + context.repo.repo + '/actions/workflows/smart-release.yaml) to create a release.'
                });
                
              } else {
                console.log(`‚è≥ PR not ready for merge yet (${pr.mergeable_state}) - auto-merge will happen when ready`);
              }
              
            } catch (error) {
              console.error('‚ùå Failed to enable auto-merge:', error.message);
              
              // Comment about the failure
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: `‚ö†Ô∏è **Auto-merge failed**\n\nReason: ${error.message}\n\nPlease merge this PR manually after reviewing the changes.`
              });
              
              throw error;
            }