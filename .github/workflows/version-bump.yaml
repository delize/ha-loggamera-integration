name: Auto Version Bump

on:
  pull_request:
    types: [closed]
    branches: [main]

jobs:
  bump-version:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write

    steps:
      - name: Security Check - Mask Sensitive Values
        run: |
          # Ensure any token values are masked in logs
          echo "::add-mask::${{ secrets.PAT_TOKEN }}"
          echo "üîí Security: Token values are masked in all logs"

      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Get current version
        id: current_version
        run: |
          CURRENT_VERSION=$(python -c "import json; print(json.load(open('custom_components/loggamera/manifest.json'))['version'])")
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Determine version bump type
        id: bump_type
        uses: actions/github-script@v7
        with:
          script: |
            const prTitle = context.payload.pull_request.title;
            const prLabels = context.payload.pull_request.labels.map(label => label.name);

            console.log(`PR Title: "${prTitle}"`);
            console.log(`PR Labels: [${prLabels.join(', ')}]`);

            let bumpType = null;
            let shouldBump = false;

            // Check title patterns
            if (/\[BREAKING\]|\[MAJOR\]/i.test(prTitle)) {
              bumpType = 'major';
              shouldBump = true;
              console.log('‚úÖ Major bump detected from title');
            } else if (/\[FEATURE\]|\[MINOR\]/i.test(prTitle)) {
              bumpType = 'minor';
              shouldBump = true;
              console.log('‚úÖ Minor bump detected from title');
            } else if (/\[PATCH\]/i.test(prTitle)) {
              bumpType = 'patch';
              shouldBump = true;
              console.log('‚úÖ Patch bump detected from title');
            }

            // Check labels (override title if found)
            if (prLabels.some(label => ['breaking', 'major'].includes(label))) {
              bumpType = 'major';
              shouldBump = true;
              console.log('‚úÖ Major bump detected from labels');
            } else if (prLabels.some(label => ['feature', 'enhancement', 'minor'].includes(label))) {
              bumpType = 'minor';
              shouldBump = true;
              console.log('‚úÖ Minor bump detected from labels');
            } else if (prLabels.some(label => ['patch', 'bug', 'documentation', 'dependencies'].includes(label))) {
              bumpType = 'patch';
              shouldBump = true;
              console.log('‚úÖ Patch bump detected from labels');
            }

            if (shouldBump) {
              core.setOutput('type', bumpType);
              core.setOutput('should_bump', 'true');
              core.summary.addRaw(`üîñ **Version Bump Detected**: ${bumpType.toUpperCase()}`);
            } else {
              core.setOutput('should_bump', 'false');
              core.summary.addRaw('‚ùå **No Version Bump**: No labels or title keywords found');
              console.log('‚ùå No version bump indicators found');
            }

      - name: Calculate new version
        id: new_version
        if: steps.bump_type.outputs.should_bump == 'true'
        run: |
          CURRENT_VERSION="${{ steps.current_version.outputs.version }}"
          BUMP_TYPE="${{ steps.bump_type.outputs.type }}"

          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}

          case $BUMP_TYPE in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac

          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update manifest.json
        if: steps.bump_type.outputs.should_bump == 'true'
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.version }}"
          python -c "
          import json
          with open('custom_components/loggamera/manifest.json', 'r') as f:
              manifest = json.load(f)
          manifest['version'] = '$NEW_VERSION'
          with open('custom_components/loggamera/manifest.json', 'w') as f:
              json.dump(manifest, f, indent=2)
          "

      - name: Update CHANGELOG.md
        if: steps.bump_type.outputs.should_bump == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const newVersion = '${{ steps.new_version.outputs.version }}';
            const bumpType = '${{ steps.bump_type.outputs.type }}';
            const prTitle = context.payload.pull_request.title;
            const prNumber = context.payload.pull_request.number;
            const prAuthor = context.payload.pull_request.user.login;
            const currentDate = new Date().toISOString().split('T')[0];

            console.log(`üìù Updating CHANGELOG.md for version ${newVersion}`);

            // Read current CHANGELOG.md
            let changelog = fs.readFileSync('CHANGELOG.md', 'utf8');

            // Create new changelog entry
            const newEntry = `## [${newVersion}] - ${currentDate}

            ### ${bumpType.charAt(0).toUpperCase() + bumpType.slice(1)} Release
            - ${prTitle} (#${prNumber}) by @${prAuthor}

            `;

            // Find the [Unreleased] section and add the new entry after it
            const unreleasedSectionEnd = changelog.indexOf('## [Unreleased]');
            if (unreleasedSectionEnd !== -1) {
              // Find the end of the Unreleased section (next ## heading or end of file)
              let insertPosition = changelog.indexOf('\n## [', unreleasedSectionEnd + 1);
              if (insertPosition === -1) {
                // No other version sections found, append to end
                insertPosition = changelog.length;
              }

              // Insert the new entry
              changelog = changelog.slice(0, insertPosition) + '\n' + newEntry + changelog.slice(insertPosition);
            } else {
              // No Unreleased section found, add after the header
              const headerEnd = changelog.indexOf('\n\n') + 2;
              changelog = changelog.slice(0, headerEnd) + newEntry + '\n' + changelog.slice(headerEnd);
            }

            // Also update the Unreleased section to be empty/clean
            changelog = changelog.replace(
              /(## \[Unreleased\][\s\S]*?)(\n## \[)/,
              '## [Unreleased]\n\n### Added\n\n### Changed\n\n### Fixed\n\n### Security\n\n$2'
            );

            // Write the updated changelog
            fs.writeFileSync('CHANGELOG.md', changelog);
            console.log('‚úÖ CHANGELOG.md updated successfully');

      - name: Create version bump branch and PR
        if: steps.bump_type.outputs.should_bump == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
          script: |
            const newVersion = '${{ steps.new_version.outputs.version }}';
            const bumpType = '${{ steps.bump_type.outputs.type }}';
            const prTitle = context.payload.pull_request.title;
            const prNumber = context.payload.pull_request.number;

            // Create a new branch for the version bump
            const branchName = `version-bump/v${newVersion}`;

            try {
              // Try to push directly to main first (in case branch protection allows it)
              const { execSync } = require('child_process');

              execSync(`git config --local user.email "action@github.com"`);
              execSync(`git config --local user.name "GitHub Action"`);
              execSync(`git add custom_components/loggamera/manifest.json CHANGELOG.md`);
              execSync(`git commit -m "üîñ Bump version to ${newVersion}

              - Updated manifest.json from ${bumpType} release
              - Updated CHANGELOG.md with release notes
              - Triggered by: ${prTitle} (#${prNumber})

              ü§ñ Generated with [Claude Code](https://claude.ai/code)

              Co-Authored-By: Claude <noreply@anthropic.com>"`);

              try {
                execSync(`git push origin main`);
                console.log('‚úÖ Version bump pushed directly to main');
                return;
              } catch (pushError) {
                console.log('‚ö†Ô∏è Direct push failed - creating PR instead');
              }

              // Direct push failed, create a branch and PR

              // Delete existing branch if it exists
              try {
                execSync(`git push origin --delete ${branchName}`, { stdio: 'ignore' });
                console.log(`üóëÔ∏è Deleted existing branch ${branchName}`);
              } catch (deleteError) {
                console.log(`‚ÑπÔ∏è Branch ${branchName} doesn't exist remotely (expected for new versions)`);
              }
              execSync(`git checkout -b ${branchName}`);
              execSync(`git push origin ${branchName}`);

              // Create PR body
              const prBody = [
                '## üîñ Automatic Version Bump',
                '',
                `**New Version**: \`${newVersion}\` (${bumpType} release)`,
                `**Triggered by**: ${prTitle} (#${prNumber})`,
                '',
                '### üìù Changes Made:',
                `- ‚úÖ Updated \`manifest.json\` version to \`${newVersion}\``,
                '- ‚úÖ Updated \`CHANGELOG.md\` with release notes',
                '',
                '### üöÄ Next Steps:',
                '1. Review and merge this PR',
                `2. Create a release using the [Smart Release workflow](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/workflows/smart-release.yaml)`,
                '',
                '---',
                '',
                'ü§ñ This PR was created automatically by the version bump workflow.',
                '',
                '‚ö° **Auto-merge ready** - This PR can be safely merged without additional review.'
              ].join('\\n');

              const { data: pr } = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `üîñ Bump version to ${newVersion}`,
                head: branchName,
                base: 'main',
                body: prBody
              });

              console.log(`‚úÖ Created version bump PR: #${pr.number}`);
              console.log(`üîó PR URL: ${pr.html_url}`);

              // Trigger required status checks manually
              try {
                console.log('üîÑ Triggering required status checks...');

                // Trigger lint workflow
                await github.rest.actions.createWorkflowDispatch({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  workflow_id: 'lint.yaml',
                  ref: branchName
                });

                // Trigger hassfest workflow
                await github.rest.actions.createWorkflowDispatch({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  workflow_id: 'hassfest.yaml',
                  ref: branchName
                });

                // Trigger validate workflow
                await github.rest.actions.createWorkflowDispatch({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  workflow_id: 'validate.yaml',
                  ref: branchName
                });

                console.log('‚úÖ Status checks triggered');
              } catch (triggerError) {
                console.log('‚ö†Ô∏è Could not trigger status checks manually:', triggerError.message);
                console.log('üîÑ Checks should trigger automatically on PR creation');
              }

              // Add auto-merge label if it exists
              try {
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr.number,
                  labels: ['auto-merge', 'version-bump']
                });
              } catch (labelError) {
                console.log('‚ÑπÔ∏è Could not add labels (labels may not exist)');
              }

              core.setOutput('pr_number', pr.number);
              core.setOutput('pr_url', pr.html_url);

            } catch (error) {
              console.error('‚ùå Failed to create version bump:', error.message);
              core.setFailed(`Failed to create version bump: ${error.message}`);
            }

      - name: Comment on original PR
        if: steps.bump_type.outputs.should_bump == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const newVersion = '${{ steps.new_version.outputs.version }}';
            const bumpType = '${{ steps.bump_type.outputs.type }}';
            const prNumber = '${{ steps.create-version-bump-branch-and-pr.outputs.pr_number }}';
            const prUrl = '${{ steps.create-version-bump-branch-and-pr.outputs.pr_url }}';

            let commentBody = `üîñ **Version Bump Triggered!**

            This PR triggered a **${bumpType}** version bump to \`v${newVersion}\`.`;

            if (prNumber && prUrl) {
              commentBody += `

              üìã **Version Bump PR Created**: #${prNumber}
              üîó **Review and merge**: ${prUrl}

              ‚úÖ Once the version bump PR is merged, you can create a release using the [Smart Release workflow](https://github.com/delize/home-assistant-loggamera-integration/actions/workflows/smart-release.yaml)`;
            } else {
              commentBody += `

              ‚úÖ **Version bump applied directly to main branch.**

              üöÄ Ready to create a release? Run the [Smart Release workflow](https://github.com/delize/home-assistant-loggamera-integration/actions/workflows/smart-release.yaml) with version \`${newVersion}\``;
            }

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });
