name: Auto Version Bump

on:
  pull_request:
    types: [closed]
    branches: [main]

jobs:
  bump-version:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Get current version
        id: current_version
        run: |
          CURRENT_VERSION=$(python -c "import json; print(json.load(open('custom_components/loggamera/manifest.json'))['version'])")
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Determine version bump type
        id: bump_type
        uses: actions/github-script@v7
        with:
          script: |
            const prTitle = context.payload.pull_request.title;
            const prLabels = context.payload.pull_request.labels.map(label => label.name);
            
            console.log(`PR Title: "${prTitle}"`);
            console.log(`PR Labels: [${prLabels.join(', ')}]`);
            
            let bumpType = null;
            let shouldBump = false;
            
            // Check title patterns
            if (/\[BREAKING\]|\[MAJOR\]/i.test(prTitle)) {
              bumpType = 'major';
              shouldBump = true;
              console.log('‚úÖ Major bump detected from title');
            } else if (/\[FEATURE\]|\[MINOR\]/i.test(prTitle)) {
              bumpType = 'minor';
              shouldBump = true;
              console.log('‚úÖ Minor bump detected from title');
            } else if (/\[PATCH\]/i.test(prTitle)) {
              bumpType = 'patch';
              shouldBump = true;
              console.log('‚úÖ Patch bump detected from title');
            }
            
            // Check labels (override title if found)
            if (prLabels.some(label => ['breaking', 'major'].includes(label))) {
              bumpType = 'major';
              shouldBump = true;
              console.log('‚úÖ Major bump detected from labels');
            } else if (prLabels.some(label => ['feature', 'enhancement', 'minor'].includes(label))) {
              bumpType = 'minor';
              shouldBump = true;
              console.log('‚úÖ Minor bump detected from labels');
            } else if (prLabels.some(label => ['patch', 'bug', 'documentation', 'dependencies'].includes(label))) {
              bumpType = 'patch';
              shouldBump = true;
              console.log('‚úÖ Patch bump detected from labels');
            }
            
            if (shouldBump) {
              core.setOutput('type', bumpType);
              core.setOutput('should_bump', 'true');
              core.summary.addRaw(`üîñ **Version Bump Detected**: ${bumpType.toUpperCase()}`);
            } else {
              core.setOutput('should_bump', 'false');
              core.summary.addRaw('‚ùå **No Version Bump**: No labels or title keywords found');
              console.log('‚ùå No version bump indicators found');
            }

      - name: Calculate new version
        id: new_version
        if: steps.bump_type.outputs.should_bump == 'true'
        run: |
          CURRENT_VERSION="${{ steps.current_version.outputs.version }}"
          BUMP_TYPE="${{ steps.bump_type.outputs.type }}"
          
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          case $BUMP_TYPE in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update manifest.json
        if: steps.bump_type.outputs.should_bump == 'true'
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.version }}"
          python -c "
          import json
          with open('custom_components/loggamera/manifest.json', 'r') as f:
              manifest = json.load(f)
          manifest['version'] = '$NEW_VERSION'
          with open('custom_components/loggamera/manifest.json', 'w') as f:
              json.dump(manifest, f, indent=2)
          "

      - name: Commit version bump
        if: steps.bump_type.outputs.should_bump == 'true'
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.version }}"
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add custom_components/loggamera/manifest.json
          git commit -m "üîñ Bump version to $NEW_VERSION"
          git push

      - name: Comment on PR
        if: steps.bump_type.outputs.should_bump == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `üîñ **Version Bumped!**
              
              Version updated to \`v${{ steps.new_version.outputs.version }}\` (${{ steps.bump_type.outputs.type }} bump)
              
              üöÄ Ready to create a release? Run the [Manual Release workflow](https://github.com/delize/home-assistant-loggamera-integration/actions/workflows/manual-release.yaml) with version \`${{ steps.new_version.outputs.version }}\``
            })