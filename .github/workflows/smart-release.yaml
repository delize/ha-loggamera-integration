name: Smart Release

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        type: choice
        options:
          - 'release'
          - 'prerelease'
          - 'draft'
        default: 'release'
      custom_notes:
        description: 'Custom release notes (optional)'
        required: false
        type: string

jobs:
  smart-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Security Check - Admin Only
        uses: actions/github-script@v7
        with:
          script: |
            const { data: permission } = await github.rest.repos.getCollaboratorPermissionLevel({
              owner: context.repo.owner,
              repo: context.repo.repo,
              username: context.actor
            });
            
            if (!['admin', 'maintain'].includes(permission.permission)) {
              core.setFailed(`❌ Access denied. Only repository admins can create releases. Your permission: ${permission.permission}`);
              return;
            }
            
            console.log(`✅ Admin permission verified for ${context.actor}: ${permission.permission}`);
      
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Get full history for changelog generation

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Get version from manifest
        id: get_version
        run: |
          VERSION=$(python -c "import json; print(json.load(open('custom_components/loggamera/manifest.json'))['version'])")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📦 Current manifest version: $VERSION"

      - name: Get previous release info
        id: prev_release
        run: |
          RELEASE_TYPE="${{ github.event.inputs.release_type }}"
          
          if [ "$RELEASE_TYPE" = "release" ]; then
            # For full releases: get the last full release (n-1)
            echo "🔍 Looking for last full release (excluding pre-releases)"
            PREV_TAG=$(gh release list --json tagName,isPrerelease --jq '.[] | select(.isPrerelease == false) | .tagName' | head -1 2>/dev/null || echo "")
            
            if [ -n "$PREV_TAG" ]; then
              echo "previous_tag=$PREV_TAG" >> $GITHUB_OUTPUT
              echo "📋 Last full release found: $PREV_TAG"
              echo "📝 Changelog will show changes since last full release"
            else
              echo "previous_tag=" >> $GITHUB_OUTPUT
              echo "📋 No previous full release found - this will be the initial release"
            fi
          else
            # For pre-releases: get the last full release (not the last pre-release)
            echo "🔍 Looking for last full release (base for cumulative pre-release changelog)"
            PREV_TAG=$(gh release list --json tagName,isPrerelease --jq '.[] | select(.isPrerelease == false) | .tagName' | head -1 2>/dev/null || echo "")
            
            if [ -n "$PREV_TAG" ]; then
              echo "previous_tag=$PREV_TAG" >> $GITHUB_OUTPUT
              echo "📋 Base full release found: $PREV_TAG"
              echo "📝 Pre-release changelog will show cumulative changes since last full release"
            else
              # If no full release, try to get any previous tag/release
              PREV_TAG=$(gh release list --limit 1 --json tagName --jq '.[0].tagName' 2>/dev/null || echo "")
              if [ -z "$PREV_TAG" ]; then
                PREV_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
              fi
              
              if [ -n "$PREV_TAG" ]; then
                echo "previous_tag=$PREV_TAG" >> $GITHUB_OUTPUT
                echo "📋 Previous release/tag found: $PREV_TAG"
                echo "📝 Pre-release changelog will show changes since: $PREV_TAG"
              else
                echo "previous_tag=" >> $GITHUB_OUTPUT
                echo "📋 No previous releases found - this will be the initial pre-release"
              fi
            fi
          fi
          
          # Also get total commit count for debugging
          COMMIT_COUNT=$(git rev-list --count HEAD)
          echo "📊 Total commits in repository: $COMMIT_COUNT"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate changelog
        id: changelog
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          PREV_TAG="${{ steps.prev_release.outputs.previous_tag }}"
          RELEASE_TYPE="${{ github.event.inputs.release_type }}"
          
          echo "## 📝 Changelog" > changelog.md
          echo "" >> changelog.md
          
          if [ -n "$PREV_TAG" ]; then
            # Customize the changelog header based on release type
            if [ "$RELEASE_TYPE" = "release" ]; then
              echo "**Changes since last release $PREV_TAG:**" >> changelog.md
            elif [ "$RELEASE_TYPE" = "prerelease" ]; then
              echo "**Cumulative changes since last stable release $PREV_TAG:**" >> changelog.md
            else
              echo "**Changes since $PREV_TAG:**" >> changelog.md
            fi
            echo "" >> changelog.md
            
            # Debug: Show what we're comparing
            echo "🔍 Generating changelog from $PREV_TAG to HEAD"
            
            # Get commits since last release with better error handling
            COMMITS=$(git log ${PREV_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges 2>/dev/null)
            
            if [ -n "$COMMITS" ]; then
              echo "$COMMITS" >> changelog.md
              COMMIT_COUNT=$(echo "$COMMITS" | wc -l)
              echo "📝 Added $COMMIT_COUNT commits to changelog"
              
              # Add context for pre-releases
              if [ "$RELEASE_TYPE" = "prerelease" ]; then
                echo "📋 Pre-release changelog includes all changes since last stable release"
              fi
            else
              # Check if the tag exists and if we have any commits
              if git rev-parse --verify "$PREV_TAG" >/dev/null 2>&1; then
                echo "- No new commits since $PREV_TAG" >> changelog.md
                echo "⚠️ No commits found between $PREV_TAG and HEAD"
              else
                echo "- Previous tag $PREV_TAG not found in repository" >> changelog.md
                echo "⚠️ Previous tag $PREV_TAG not found in repository"
              fi
            fi
          else
            # No previous release - show recent commits
            if [ "$RELEASE_TYPE" = "prerelease" ]; then
              echo "**Initial Pre-release - Recent Changes:**" >> changelog.md
            else
              echo "**Initial Release - Recent Changes:**" >> changelog.md
            fi
            echo "" >> changelog.md
            
            # Get last 10 commits for initial release
            RECENT_COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges -10 2>/dev/null)
            
            if [ -n "$RECENT_COMMITS" ]; then
              echo "$RECENT_COMMITS" >> changelog.md
              echo "📝 Added recent commits for initial release"
            else
              if [ "$RELEASE_TYPE" = "prerelease" ]; then
                echo "- Initial pre-release" >> changelog.md
              else
                echo "- Initial release" >> changelog.md
              fi
              echo "📝 Using fallback initial release message"
            fi
          fi
          
          echo "" >> changelog.md
          
          # Debug: Show what was generated
          echo "📄 Generated changelog:"
          cat changelog.md

      - name: Generate release notes
        id: release_notes
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          RELEASE_TYPE="${{ github.event.inputs.release_type }}"
          CUSTOM_NOTES="${{ github.event.inputs.custom_notes }}"
          
          # Start release notes based on type
          case $RELEASE_TYPE in
            "prerelease")
              echo "## 🚧 Pre-release v$VERSION" > release_notes.md
              echo "" >> release_notes.md
              echo "⚠️ **This is a pre-release version.** It may contain bugs or incomplete features." >> release_notes.md
              ;;
            "draft")
              echo "## 📝 Draft Release v$VERSION" > release_notes.md
              echo "" >> release_notes.md
              echo "🔍 **This is a draft release.** Review and edit before publishing." >> release_notes.md
              ;;
            *)
              echo "## 🎉 Release v$VERSION" > release_notes.md
              ;;
          esac
          
          echo "" >> release_notes.md
          
          # Add custom notes if provided
          if [ -n "$CUSTOM_NOTES" ]; then
            echo "$CUSTOM_NOTES" >> release_notes.md
            echo "" >> release_notes.md
          fi
          
          # Add changelog from the maintained CHANGELOG.md file
          if [ -f CHANGELOG.md ]; then
            echo "## 📝 Recent Changes" >> release_notes.md
            echo "" >> release_notes.md
            
            # Extract the latest version section from CHANGELOG.md
            VERSION="${{ steps.get_version.outputs.version }}"
            
            # Try to find this version in CHANGELOG.md
            if grep -q "## \[$VERSION\]" CHANGELOG.md; then
              echo "**From CHANGELOG.md:**" >> release_notes.md
              echo "" >> release_notes.md
              
              # Extract the section for this version
              sed -n "/## \[$VERSION\]/,/## \[/p" CHANGELOG.md | sed '$d' | tail -n +2 >> release_notes.md
            else
              # Fall back to generated changelog
              cat changelog.md >> release_notes.md
            fi
          else
            # Fall back to generated changelog if CHANGELOG.md doesn't exist
            cat changelog.md >> release_notes.md
          fi
          echo "" >> release_notes.md
          
          # Add installation instructions
          cat >> release_notes.md << 'EOF'
          ## 🚀 Installation
          
          ### HACS (Recommended)
          1. Go to HACS → Integrations
          2. Search for "Loggamera"
          3. Click Install
          4. Restart Home Assistant
          
          ### Manual Installation
          1. Download the `loggamera.zip` from assets below
          2. Extract to `config/custom_components/loggamera`
          3. Restart Home Assistant
          
          ## 📱 Supported Devices
          - **PowerMeter** - Electricity meters and energy monitoring
          - **RoomSensor** - Temperature and humidity sensors
          - **WaterMeter** - Water consumption monitoring
          - **CoolingUnit** - Cooling system monitoring
          - **HeatPump** - Heat pump monitoring
          
          ## 🔗 Links
          - 📖 [Documentation](https://github.com/delize/home-assistant-loggamera-integration)
          - 🐛 [Report Issues](https://github.com/delize/home-assistant-loggamera-integration/issues)
          - 🛠️ [Diagnostic Tools](https://github.com/delize/home-assistant-loggamera-integration/tree/main/tools)
          - ⚡ [Home Assistant Energy Dashboard Integration](https://www.home-assistant.io/docs/energy/)
          EOF

      - name: Create release asset
        run: |
          # Create a clean zip of just the integration
          mkdir -p release_assets
          cd custom_components
          zip -r ../release_assets/loggamera.zip loggamera/
          cd ..
          echo "📦 Created loggamera.zip asset"

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v${{ steps.get_version.outputs.version }}"
          name: "Release v${{ steps.get_version.outputs.version }}"
          body_path: release_notes.md
          files: release_assets/loggamera.zip
          draft: ${{ github.event.inputs.release_type == 'draft' }}
          prerelease: ${{ github.event.inputs.release_type == 'prerelease' }}
          generate_release_notes: false  # We're providing our own
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify and Fix Release Status  
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          RELEASE_TYPE="${{ github.event.inputs.release_type }}"
          
          echo "🔍 Checking release status for v$VERSION"
          
          # Wait a moment for GitHub API to be consistent
          sleep 2
          
          # Get the release info
          RELEASE_INFO=$(gh release view "v$VERSION" --json isLatest,isDraft,isPrerelease,tagName)
          echo "📋 Release info: $RELEASE_INFO"
          
          IS_LATEST=$(echo "$RELEASE_INFO" | jq -r '.isLatest')
          IS_DRAFT=$(echo "$RELEASE_INFO" | jq -r '.isDraft')
          IS_PRERELEASE=$(echo "$RELEASE_INFO" | jq -r '.isPrerelease')
          
          echo "📊 Release Status:"
          echo "   - Latest: $IS_LATEST"
          echo "   - Draft: $IS_DRAFT" 
          echo "   - Pre-release: $IS_PRERELEASE"
          echo "   - Release Type: $RELEASE_TYPE"
          
          # For full releases, ALWAYS ensure it's marked as latest (even for existing releases)
          if [ "$RELEASE_TYPE" = "release" ]; then
            if [ "$IS_LATEST" != "true" ]; then
              echo "⚠️ Full release is not marked as latest! Fixing now..."
              
              # Mark this release as latest using GitHub CLI
              gh release edit "v$VERSION" --latest
              
              # Wait and verify the fix
              sleep 2
              UPDATED_INFO=$(gh release view "v$VERSION" --json isLatest)
              UPDATED_LATEST=$(echo "$UPDATED_INFO" | jq -r '.isLatest')
              
              if [ "$UPDATED_LATEST" = "true" ]; then
                echo "✅ Successfully marked release v$VERSION as latest"
              else
                echo "❌ Failed to mark release as latest - manual intervention may be needed"
                exit 1
              fi
            else
              echo "✅ Full release v$VERSION is already correctly marked as latest"
            fi
          elif [ "$RELEASE_TYPE" = "prerelease" ]; then
            if [ "$IS_LATEST" = "true" ]; then
              echo "⚠️ Pre-release should not be marked as latest, but it is. This is unusual but may be intentional."
            else
              echo "✅ Pre-release v$VERSION correctly NOT marked as latest"
            fi
          elif [ "$RELEASE_TYPE" = "draft" ]; then
            echo "📝 Draft release v$VERSION - latest status not relevant until published"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Success notification
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          RELEASE_TYPE="${{ github.event.inputs.release_type }}"
          
          case $RELEASE_TYPE in
            "prerelease")
              echo "🚧 Pre-release v$VERSION created successfully!"
              ;;
            "draft")
              echo "📝 Draft release v$VERSION created successfully!"
              echo "🔍 Review and publish when ready."
              ;;
            *)
              echo "🎉 Release v$VERSION created successfully!"
              echo "🚀 Now available in HACS!"
              ;;
          esac
          
          echo "🔗 Release URL: https://github.com/delize/home-assistant-loggamera-integration/releases/tag/v$VERSION"